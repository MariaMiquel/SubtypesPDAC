top_annotation = ha,
show_row_names = TRUE,
show_column_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 5)
)
head(assay(vsd), 3)
expMatrix <- assay(vsd)
#To make the Heatmap we will select genes based on our significant cutoffs
resMayo5259.Ordered <- resMayo5259.Ordered[!is.na(resMayo5259.Ordered$symbol),]
resMayo5259.select <- subset(resMayo5259.Ordered,
padj <= 1e-2 &
abs(resMayo5259.Ordered$log2FoldChange) >= 1)
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), rownames(resMayo5259.select))
head(inter)
#Subset the matrix to include only the significant genes of interest
expMatrix.select <- expMatrix[inter, ]
dim(expMatrix.select)
head(expMatrix.select)
#Add human readable gene names
rownames(expMatrix.select) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix.select),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
head(rownames(expMatrix.select))
#Select the Mayo5289 columns
expMatrix.select <- expMatrix.select[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.select) <- colData(dds)[colnames(expMatrix.select),"Treatment_group"]
head(expMatrix.select)
ha <- HeatmapAnnotation(Treatment = colnames(expMatrix.select),
col = list(Treatment = structure(names = c(
"Mayo_5259_Cont", "Mayo_5259_HNF4A"
), colors[3:4])))
#Scale the matrix to generate z-scores
expMatrix.select <- t(scale(t(expMatrix.select)))
#Generate the heatmap
Heatmap(
expMatrix.select ,
col = colorRamp2(c(-2, 0, 2), c("#377EB8", "white", "#E41A1C")),
name = "Z score",
cluster_columns = TRUE,
cluster_rows = TRUE,
top_annotation = ha,
show_row_names = TRUE,
show_column_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 5)
)
#Looking at the vsd matrix it comprises EnsemblIds and not gene symbols as row names!
head(assay(vsd), 3)
expMatrix <- assay(vsd)
#To make the Heatmap we will select genes based on our significant cutoffs
resMayo5259.Ordered <- resMayo5259.Ordered[!is.na(resMayo5259.Ordered$symbol),]
resMayo5259.select <- subset(resMayo5259.Ordered,
padj <= 1e-10 &
abs(resMayo5259.Ordered$log2FoldChange) >= 1)
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), rownames(resMayo5259.select))
head(inter)
#Subset the matrix to include only the significant genes of interest
expMatrix.select <- expMatrix[inter, ]
dim(expMatrix.select)
head(expMatrix.select)
#Add human readable gene names
rownames(expMatrix.select) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix.select),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
head(rownames(expMatrix.select))
#Select the Mayo5289 columns
expMatrix.select <- expMatrix.select[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.select) <- colData(dds)[colnames(expMatrix.select),"Treatment_group"]
head(expMatrix.select)
library(ComplexHeatmap)
library(circlize)
#Define some colours for the annotation
colors <- RColorBrewer::brewer.pal(8, "Set1")
#Make the sample annotation track
ha <- HeatmapAnnotation(Treatment = colnames(expMatrix.select),
col = list(Treatment = structure(names = c(
"Mayo_5259_Cont", "Mayo_5259_HNF4A"
), colors[3:4])))
expMatrix.select <- t(scale(t(expMatrix.select)))
#Generate the heatmap
Heatmap(
expMatrix.select ,
col = colorRamp2(c(-2, 0, 2), c("#377EB8", "white", "#E41A1C")),
name = "Z score",
cluster_columns = TRUE,
cluster_rows = TRUE,
top_annotation = ha,
show_row_names = TRUE,
show_column_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 5)
)
head(assay(vsd), 3)
expMatrix <- assay(vsd)
#To make the Heatmap we will select genes based on our significant cutoffs
resMayo5259.Ordered <- resMayo5259.Ordered[!is.na(resMayo5259.Ordered$symbol),]
resMayo5259.select <- subset(resMayo5259.Ordered,
padj <= 1e-20 &
abs(resMayo5259.Ordered$log2FoldChange) >= 1)
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), rownames(resMayo5259.select))
head(inter)
#Subset the matrix to include only the significant genes of interest
expMatrix.select <- expMatrix[inter, ]
dim(expMatrix.select)
head(expMatrix.select)
#Add human readable gene names
rownames(expMatrix.select) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix.select),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
head(rownames(expMatrix.select))
#Select the Mayo5289 columns
expMatrix.select <- expMatrix.select[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.select) <- colData(dds)[colnames(expMatrix.select),"Treatment_group"]
head(expMatrix.select)
ha <- HeatmapAnnotation(Treatment = colnames(expMatrix.select),
col = list(Treatment = structure(names = c(
"Mayo_5259_Cont", "Mayo_5259_HNF4A"
), colors[3:4])))
#Scale the matrix to generate z-scores
expMatrix.select <- t(scale(t(expMatrix.select)))
#Generate the heatmap
Heatmap(
expMatrix.select ,
col = colorRamp2(c(-2, 0, 2), c("#377EB8", "white", "#E41A1C")),
name = "Z score",
cluster_columns = TRUE,
cluster_rows = TRUE,
top_annotation = ha,
show_row_names = TRUE,
show_column_names = TRUE,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 5)
)
library(reshape)
melt(expMatrix.select)
?melt
melt(expMatrix.select, varnames = c("Gene", "Treatment", "Value"))
melt(expMatrix.select, varnames = c("Gene", "Treatment"))
ggboxplot(expMatrix.melt, x = "Treatment", y = c("GATA6","HNF4A"),
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
library(ggpubr)
ggboxplot(expMatrix.melt, x = "Treatment", y = c("GATA6","HNF4A"),
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
expMatrix.melt <- melt(expMatrix.select, varnames = c("Gene", "Treatment"))
head(expMatrix.melt)
library(ggpubr)
ggboxplot(expMatrix.melt, x = "Treatment", y = c("HNF4A", "ZBED2", "DEPTOR"),
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
library(ggpubr)
ggboxplot(expMatrix.melt, x = "Treatment",
y = "Gene",
select = c("HNF4A", "ZBED2", "DEPTOR"),
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
ggboxplot(expMatrix.melt, x = "Treatment",
y = c("HNF4A", "ZBED2", "DEPTOR"),
facet.by = "Gene",
title = "Expression by Treatment",
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
ggboxplot(expMatrix.melt, x = "value",
y = "Treatment",
select = c("HNF4A", "ZBED2", "DEPTOR"),
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
expMatrix.melt <- expMatrix.melt[expMatrix.melt$Gene %in% c("HNF4A", "ZBED2", "DEPTOR"), ]
expMatrix.melt
ggboxplot(expMatrix.melt, x = "value",
y = "Treatment",
facet.by = "Gene",
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
ggboxplot(expMatrix.melt, x = "Treatment",
y = "value",
facet.by = "Gene",
title = "Expression by Treatment",
combine = TRUE,
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
my_comparisons <- list(c("Mayo_5259_Cont", "Mayo_5259_HNF4A"))
ggboxplot(expMatrix.melt, x = "Treatment",
y = "value",
facet.by = "Gene",
title = "Expression by Treatment",
ylab = "Relative Expression",
color = "Treatment", palette = "jco") +
stat_compare_means(comparisons = my_comparisons)
head(assay(vsd), 3)
expMatrix <- assay(vsd)
#To make the Heatmap we will select genes based on our significant cutoffs
resMayo5259.Ordered <- resMayo5259.Ordered[!is.na(resMayo5259.Ordered$symbol),]
resMayo5259.select <- subset(resMayo5259.Ordered,
padj <= 1e-20 &
abs(resMayo5259.Ordered$log2FoldChange) >= 1)
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), rownames(resMayo5259.select))
head(inter)
#Subset the matrix to include only the significant genes of interest
expMatrix.select <- expMatrix[inter, ]
dim(expMatrix.select)
head(expMatrix.select)
#Add human readable gene names
rownames(expMatrix.select) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix.select),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
head(rownames(expMatrix.select))
#Select the Mayo5289 columns
expMatrix.select <- expMatrix.select[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.select) <- colData(dds)[colnames(expMatrix.select),"Treatment_group"]
head(expMatrix.select)
library(reshape)
expMatrix.melt <- melt(expMatrix.select, varnames = c("Gene", "Treatment"))
head(expMatrix.melt)
library(ggpubr)
expMatrix.melt <- expMatrix.melt[expMatrix.melt$Gene %in% c("HNF4A", "ZBED2", "DEPTOR"), ]
ggboxplot(expMatrix.melt, x = "Treatment",
y = "value",
facet.by = "Gene",
title = "Expression by Treatment",
ylab = "Relative Expression",
color = "Treatment", palette = "jco")
my_comparisons <- list(c("Mayo_5259_Cont", "Mayo_5259_HNF4A"))
ggboxplot(expMatrix.melt, x = "Treatment",
y = "value",
facet.by = "Gene",
title = "Expression by Treatment",
ylab = "Relative Expression",
color = "Treatment", palette = "jco") +
stat_compare_means(comparisons = my_comparisons)
compare_means(expMatrix.melt[expMatrix.melt$Gene =="HNF4A", ] ~ Treatment, data=expMatrix.melt)
compare_means("HNF4A" ~ Treatment, data=expMatrix.melt)
library(clusterProfiler)
resMayo5259.up <- subset(resMayo5259.Ordered,
padj <= 0.05 &
resMayo5259.Ordered$log2FoldChange >= 1)
resMayo5259.down <- subset(resMayo5259.Ordered,
padj <= 0.05 &
resMayo5259.Ordered$log2FoldChange >= 1)
geneList <- list(HNFKDup=resMayo5259.up$symbol, HNFKDdown=resMayo5259.down$symbol)
ck <- compareCluster(geneCluster = gcSample, fun = "enrichKEGG")
head(as.data.frame(ck))
ck <- compareCluster(geneList = gcSample, fun = "enrichKEGG")
ck <- compareCluster(geneCluster = geneList, fun = "enrichKEGG")
entrezIds <- bitr(resMayo5259.Ordered$symbol, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(entrezIds)
entrezIds
geneList <- list(HNFKDup=resMayo5259.up$entrez, HNFKDdown=resMayo5259.down$entrez)
ck <- compareCluster(geneCluster = geneList, fun = "enrichKEGG")
head(as.data.frame(ck))
geneList
geneList[[1]]
geneList <- list(HNFKDup=as.vector(resMayo5259.up$entrez), HNFKDdown=as.vector(resMayo5259.down$entrez))
ck <- compareCluster(geneCluster = geneList, fun = "enrichKEGG")
as.vector(resMayo5259.down$entrez)
data(gcSample)
ck <- compareCluster(geneCluster = gcSample, fun = "enrichKEGG")
head(as.data.frame(ck))
gcSample
resMayo5259.up <- subset(resMayo5259.Ordered,
padj <= 0.05)
resMayo5259.down <- subset(resMayo5259.Ordered,
padj <= 0.05)
geneList <- list(HNFKDup=resMayo5259.up$entrez, HNFKDdown=resMayo5259.down$entrez)
ck <- compareCluster(geneCluster = geneList, fun = "enrichKEGG")
head(as.data.frame(ck))
ckRead <- setReadable(ck, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
## The geneID column is translated to symbol
head(ckRead, 3)
ck
slotNames(ck)
ck@compareClusterResult
ckRead <- setReadable(ck@compareClusterResult, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
head(ckRead, 3)
dotplot(ck)
resMayo5259.up <- subset(resMayo5259.Ordered,
padj <= 0.05 & log2FoldChange >=1)
resMayo5259.down <- subset(resMayo5259.Ordered,
padj <= 0.05 & log2FoldChange <=1)
geneList <- list(HNFKDup=resMayo5259.up$entrez, HNFKDdown=resMayo5259.down$entrez)
ck <- compareCluster(geneCluster = geneList, fun = "enrichKEGG")
head(as.data.frame(ck))
dotplot(ck)
resMayo5259.up <- subset(resMayo5259.Ordered,
padj <= 0.05 & log2FoldChange > 0)
resMayo5259.down <- subset(resMayo5259.Ordered,
padj <= 0.05 & log2FoldChange < 0)
geneList <- list(HNFKDup=resMayo5259.up$entrez, HNFKDdown=resMayo5259.down$entrez)
ck <- compareCluster(geneCluster = geneList, fun = "enrichKEGG")
head(as.data.frame(ck))
dotplot(ck)
resMayo5259.enriched <- subset(resMayo5259.Ordered,
padj <= 0.05 & abs(log2FoldChange) >= 1)
kk <- enrichKEGG(gene         = resMayo5259.enriched$entrez,
organism     = 'hsa',
pvalueCutoff = 0.05)
head(kk)
resMayo5259.enriched$entrez
kk
resMayo5259.enriched <- subset(resMayo5259.Ordered,
padj <= 0.05)
kk <- enrichKEGG(gene         = resMayo5259.enriched$entrez,
organism     = 'hsa',
pvalueCutoff = 0.05)
head(kk)
dotplot(kk)
keggEnrichRead <- setReadable(keggEnrich, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
keggEnrich <- enrichKEGG(gene         = resMayo5259.enriched$entrez,
organism     = 'hsa',
pvalueCutoff = 0.05)
head(keggEnrich )
keggEnrichRead <- setReadable(keggEnrich, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
## The geneID column is translated to symbol
head(keggEnrichRead, 3)
dotplot(keggEnrichRead, showCategory=30)
dotplot(keggEnrichRead, showCategory=15)
dotplot(keggEnrich)
dotplot(keggEnrich, showCategory=15)
library(ReactomePA)
reactomeEnrich <-enrichPathway(gene=resMayo5259.enriched$entrez, organism = "human", pvalueCutoff = 0.05,
pAdjustMethod = "BH", qvalueCutoff = 0.2, universe, minGSSize = 10,
maxGSSize = 500, readable = FALSE)
reactomeEnrich <-enrichPathway(gene=resMayo5259.enriched$entrez, organism = "human", pvalueCutoff = 0.05,
pAdjustMethod = "BH", qvalueCutoff = 0.2, universe, minGSSize = 10,
maxGSSize = 500)
enrichPathway(resMayo5259.enriched$entrez, pvalueCutoff=0.05)
reactomeEnrich <-enrichPathway(gene=resMayo5259.enriched$entrez,
organism = "human", pvalueCutoff = 0.05,
pAdjustMethod = "BH", qvalueCutoff = 0.2, minGSSize = 10,
maxGSSize = 500)
head(summary(reactomeEnrich))
reactomeEnrich <-enrichPathway(gene=resMayo5259.enriched$entrez,
organism = "human", pvalueCutoff = 0.05,
pAdjustMethod = "BH", qvalueCutoff = 0.2, minGSSize = 10,
maxGSSize = 500, readable = TRUE)
head(reactomeEnrich, 3)
head(reactomeEnrich, 5)
dotplot(reactomeEnrich)
plot1 <- dotplot(keggEnriched, showCategory=30) + ggtitle("KEGG Enrichment")
plot2 <- dotplot(reactomeEnriched, showCategory=30) + ggtitle("REACTOME Enrichment")
plot_grid(plot1, plot2, ncol=2)
library(enrichplot)
plot1 <- dotplot(keggEnrich, showCategory=30) + ggtitle("KEGG Enrichment")
plot2 <- dotplot(reactomeEnrich, showCategory=30) + ggtitle("REACTOME Enrichment")
plot_grid(plot1, plot2, ncol=2)
upsetplot(reactomeEnrich)
reactomeEnrich$result
reactomeEnrich@result
reactomeEnrich@result
emapplot(reactomeEnrich)
reactResults <- reactomeEnrich@result
reactResults %>% head()
subset(reactResults, Description == "Interleukin-6 signaling")$geneID
reactResults[1:10,]
subset(reactResults, Description == "Transcriptional Regulation by TP53")$geneID
?strsplit
strsplit(tp53genes, "/")[[1]]
tp53genes <- subset(reactResults, Description == "Transcriptional Regulation by TP53")$geneID
tp53genes.vector <- strsplit(tp53genes, "/")[[1]]
tp53genes.vector
expMatrix <- assay(vsd)
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), tp53genes.vector)
head(inter)
#Subset the matrix to include only the significant genes of interest
expMatrix.tp53 <- expMatrix[inter, ]
#Add human readable gene names
rownames(expMatrix.tp53) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix.select),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
expMatrix.tp53 <- expMatrix.tp53[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.tp53) <- colData(dds)[colnames(expMatrix.tp53),"Treatment_group"]
ha <- HeatmapAnnotation(Treatment = colnames(expMatrix.tp53),
col = list(Treatment = structure(names = c(
"Mayo_5259_Cont", "Mayo_5259_HNF4A"
), colors[3:4])))
#Scale the matrix to generate z-scores
expMatrix.tp53.sc <- t(scale(t(expMatrix.tp53)))
#Generate the heatmap
Heatmap(
expMatrix.tp53.sc,
col = colorRamp2(c(-2, 0, 2), c("#377EB8", "white", "#E41A1C")),
name = "Z score",
cluster_columns = TRUE,
cluster_rows = TRUE,
top_annotation = ha,
show_row_names = TRUE,
show_column_names = FALSE, #Turned off column names
row_names_gp = gpar(fontsize = 5),
column_names_gp = gpar(fontsize = 5)
)
expMatrix.tp53.sc
expMatrix <- assay(vsd)
rownames(expMatrix) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix.select),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), tp53genes.vector)
expMatrix.tp53 <- expMatrix[inter, ]
#Add human readable gene names
expMatrix.tp53 <- expMatrix.tp53[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.tp53) <- colData(dds)[colnames(expMatrix.tp53),"Treatment_group"]
ha <- HeatmapAnnotation(Treatment = colnames(expMatrix.tp53),
col = list(Treatment = structure(names = c(
"Mayo_5259_Cont", "Mayo_5259_HNF4A"
), colors[3:4])))
#Scale the matrix to generate z-scores
expMatrix.tp53.sc <- t(scale(t(expMatrix.tp53)))
#Generate the heatmap
Heatmap(
expMatrix.tp53.sc,
col = colorRamp2(c(-2, 0, 2), c("#377EB8", "white", "#E41A1C")),
name = "Z score",
cluster_columns = TRUE,
cluster_rows = TRUE,
top_annotation = ha,
show_row_names = TRUE,
show_column_names = FALSE, #Turned off column names
row_names_gp = gpar(fontsize = 5),
column_names_gp = gpar(fontsize = 5)
)
expMatrix <- assay(vsd)
rownames(expMatrix) <- mapIds(org.Hs.eg.db,
keys=rownames(expMatrix),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
#Map the significant results to the transformed expression values
inter <- intersect(rownames(expMatrix), tp53genes.vector)
expMatrix.tp53 <- expMatrix[inter, ]
#Add human readable gene names
expMatrix.tp53 <- expMatrix.tp53[, grepl("Mayo_5259_HNF4A|Mayo_5259_Cont",colData(dds)$Treatment_group)]
#Give the matrix some useful column names
colnames(expMatrix.tp53) <- colData(dds)[colnames(expMatrix.tp53),"Treatment_group"]
ha <- HeatmapAnnotation(Treatment = colnames(expMatrix.tp53),
col = list(Treatment = structure(names = c(
"Mayo_5259_Cont", "Mayo_5259_HNF4A"
), colors[3:4])))
#Scale the matrix to generate z-scores
expMatrix.tp53.sc <- t(scale(t(expMatrix.tp53)))
#Generate the heatmap
Heatmap(
expMatrix.tp53.sc,
col = colorRamp2(c(-2, 0, 2), c("#377EB8", "white", "#E41A1C")),
name = "Z score",
cluster_columns = TRUE,
cluster_rows = TRUE,
top_annotation = ha,
show_row_names = TRUE,
show_column_names = FALSE, #Turned off column names
row_names_gp = gpar(fontsize = 5),
column_names_gp = gpar(fontsize = 5)
)
browseVignettes(clusterProfiler)
browseVignettes("clusterProfiler")
sampleSheet <- read.delim("RNASeqData/SampleSheetBrunton.tsv", sep = "\t",
stringsAsFactors = FALSE)
sampleSheet
countsFile <- read.delim("RNASeqData/CountsFileBrunton.tsv",
stringsAsFactors = FALSE, sep = "\t",row.names = 1)
head(countsFile)
library(DESeq2)
## Produce a DESeq dataset
dds <- DESeqDataSetFromMatrix(countData = countsFile,
colData = sampleSheet,
design = ~ Treatment_group)
head(colData(dds))
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
resTKCC22 <- results(dds, contrast=c("Treatment_group", "TKCC-22_HNF4A", "TKCC-22_Cont"))
head(resTKCC22)
resMayo5289 <- results(dds, contrast=c("Treatment_group", "Mayo_5289_HNF4A", "Mayo_5289_Cont"))
head(resMayo5289)
colData(dds)
colData(dds)$Treatment_group
